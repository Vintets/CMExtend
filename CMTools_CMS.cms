#name "CMTools"
// Author: Vint
// Version: 1.0.0 (04.10.2021)
// Скрипт для Clickermann v4.13.014
// подключение CMTools_CMS:
// #include "CMTools\CMTools_CMS.cms"

#define \n:STRCONCAT(char(13),char(10))

#include "logger.cms"


//                              Настройки
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// показывать окно лога. Глубина 0, 1, 2
$log = 2

// главный файл настроек
$main_ini = "settings_cme.ini"

// частота проверки входных сообщений ms
$CME_check_period = 10


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ====== Описание параметров ==================================================

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~001~ Заголовок/дескриптор/класс окна
// https://autoit-script.ru/docs/intro/windowsadvanced.htm
// параметр $AI_title в функциях работы с окнами. Эти установки могут быть использованы, чтобы отличить окна по следующим свойствам:
//TITLE - Заголовок окна
//CLASS - Внутреннее название класса окна
//REGEXPTITLE -Заголовок окна с использованием регулярных выражений
//REGEXPCLASS - Название класса окна с использованием регулярных выражений
//LAST - Последнее окно, использованное в предыдущей команде
//ACTIVE - Текущее активное окно
//X \ Y \ W \ H - Координаты и размер окна
//INSTANCE - Номер экземпляра окна, если несколько окон соответствуют критерию поиска (отсчёт начинается с 1).
// [СВОЙСТВО1:Значение1; СВОЙСТВО2:Значение2; СВОЙСТВО3:Значение3]
// если "Значение" должно содержать символ ";", он должен быть продублирован

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ====== Задание внутренних переменных ========================================

STRSEPARATE("A:B:C:D:E:F", ":", $arr16) //===  перевод числа в HEX. Выход $HEX =

$comands_str = "AI_WinGetHandle:AI_GetDesktopWindow:AI_WinGetProcess:AI_WinGetProcessCM:AI_WinGetState:AI_WinSetOnTop:AI_WinSetTrans:AI_MouseWheelScrollEvent:AI_MouseWheelScrollEventUpDown:AI_MouseMoveEvent: : : : : : : : : : : : : : : : : : : : : : :AI_SETREGION:AI_GREYSCALE:AI_DRAMCONTRAST"
STRSEPARATE($comands_str, ":", $comands_list)
// 0xC400 = 50176

// =============================================================================

THREAD(CME_GetResponse, 0) //--- получение сообщений ---------------------------
    // Входящие сообщения
    // (data, command)  -  ($wPar, $lPar)
    // $lPar = 1  - Ok, команда выполнена успешно. $wPar - код команды вернувшей сообщение
    // $lPar = 2  - Error, команда выполнена неудачно. $wPar - код команды вернувшей сообщение
    // $lPar = 3  - Получены данные. $wPar - данные
    // $lPar >= 0xC400 - Получены данные от команды $lPar. $wPar - данные
    
    // Проставляемые переменные
    // $CME_command - команда вернувшая сообщение
    // $CME_return  - данные
    
    SUB(toHEX, $DEC)
        $HEX = ""
        WHILE($DEC > 0)
            $cel = INT($DEC/16)
            $ost = $DEC - $cel*16
            IF($ost > 9)
                $ost = $arr16[$ost - 10]
            END_IF
            $HEX = STRCONCAT($ost, $HEX)
            $DEC = $cel
        END_CYC
        $HEX = STRCONCAT("0x", $HEX)
    END_SUB
    
    SUB(login_message)
        IF($log > 2)
            LOGWRITE("wParam:", $wPar, "  lParam:", $lPar)  // , "  $isnew:", $isnew
        END_IF
        IF($log > 1)
            toHEX($CME_command)
            LOGWRITE("CME_command: ", $HEX, " (", $comands_list[$CME_command-50176], ")  CME_return: ", $CME_return)
        END_IF
    END_SUB
    
    GETMESSAGE($wPar, $lPar, $isnew)
    IF($isnew == 1)
        IF($lPar >= 0xC400)
            $CME_command = $lPar
            $CME_return = $wPar
            login_message()
            IF(($CME_command == AI_MouseWheelScrollEvent) | ($CME_command == AI_MouseWheelScrollEventUpDown))
                $WheelScrollEvent = $CME_return
            END_IF
            IF($CME_command == AI_MouseMoveEvent)
                $MouseMoveEvent = $CME_return
            END_IF
        END_IF
        
        IF($lPar == 3)
            $CME_command = 0
            $CME_return = $wPar
            login_message()
        END_IF
        
        IF(($lPar == 1) | ($lPar == 2))
            $CME_command = $wPar
            $CME_return = $lPar
            login_message()
        END_IF
    END_IF
    WAITMS($CME_check_period)
END_THREAD

// ====== Подпрограммы =========================================================
SUB(log_show) //--- показ лога -------------------------------------------------
    IF($log > 0)
        //LOGSHOW(1, $_xmax-440, 28)          // отображение окна лога  (335)
        LOGSHOW(1, 0, 1080-284)               // отображение окна лога  (335)
        WNDSIZE(WNDFIND("Лог", 1), 536, 260)  // изменения размеров окна лога 260/800
    END_IF
END_SUB

SUB(toHEX, $DEC)
    $HEX = ""
    WHILE($DEC > 0)
        $cel = INT($DEC/16)
        $ost = $DEC - $cel*16
        IF($ost > 9)
            $ost = $arr16[$ost - 10]
        END_IF
        $HEX = STRCONCAT($ost, $HEX)
        $DEC = $cel
    END_CYC
    //LOGWRITE($HEX)
END_SUB

SUB(log_comands_list) //--- вывод $comands_list для контроля -------------------
    FOR($i=0xC400, $i <= 0xC422)
        toHEX($i)
        $HEX = STRCONCAT("0x", $HEX)
        LOGWRITE($HEX, "  ", $comands_list[$i-50176])
    END_CYC
END_SUB

SUB(wait_completion) //--- ожидание завершения ---------------------------------
    WHILE(INT(INIREAD($main_ini, "completion", "main")) = 0)
        WAITMS(10)
    END_CYC
END_SUB

SUB(clear_message_queue)
    $isnew = 1
    WHILE($isnew == 1)
        GETMESSAGE($wPar, $lPar, $isnew)
    END_CYC
END_SUB

SUB(getHWND_CMTools) //--- получаем hwnd CMTools -------------------------------
    $time = $_ms + 3000
    WHILE($time > $_ms)
        $hwnd_CME = wndFind("CMTools v")
        IF($hwnd_CME != 0)
            $time = 0
            IF($log > 2)
                LOGWRITE("CMTools hwnd: ", $hwnd_CME, \n)
                //HINTPOPUP(STRCONCAT("CMTools hwnd: ", $hwnd_CME), "CMTools")
            END_IF
        ELSE
            WAITMS(200)
        END_IF
    END_CYC
    IF($time ! 0)
        $text = STRCONCAT("Окно CMTools не найдено", \n, "Скрипт остановлен!")
        LOGWRITE($text)
        HINTPOPUP($text, "CMTools")
        HALT
    END_IF
END_SUB

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//--- test_555 -----------------------------------------------------------------
#define AI_Test:0x555
SUB(test_555)
    PostMessage($hwnd_CME, AI_Test, 4096+4096*65536, 1920+1080*65536)
    //waitms(200)
END_SUB

//--- получить дескриптор окна (hWnd) ------------------------------------------
#define AI_WinGetHandle:0xC400
SUB(CME_WinGetHandle, $AI_title, $AI_text)
    // получает дескриптор окна (hWnd)
    // $AI_title - Заголовок/дескриптор/класс окна
    // $AI_text  - текст окна или пустая строка ""
    
    // Возвращаемые значения:
    // $CME_return  - найденный hWnd или 0
    INIWRITE($main_ini, "title", $AI_title, "window")
    INIWRITE($main_ini, "text", $AI_text, "window")
    WAITMS(5)
    PostMessage($hwnd_CME, AI_WinGetHandle, 0, 0)
    WHILE($CME_command != AI_WinGetHandle)
        WAITMS(10)
    END_CYC
    // Вариант через INI
    //wait_completion()
    //$CME_return = INT(INIREAD($main_ini, "return", "main"))
    //IF($log > 1)
    //    LOGWRITE("CME_WinGetHandle.  hWnd:  ", $CME_return)
    //END_IF
END_SUB

//--- получить дескриптор (hWnd) окна рабочего стола ---------------------------
#define AI_GetDesktopWindow:0xC401
SUB(CME_GetDesktopWindow)
    // получает дескриптор окна рабочего стола (hWnd)
    // Возвращаемые значения:
    // $CME_return  - найденный hWnd
    PostMessage($hwnd_CME, AI_GetDesktopWindow, 0, 0)
    WHILE($CME_command != AI_GetDesktopWindow)
        WAITMS(10)
    END_CYC
END_SUB

//--- получить PID окна --------------------------------------------------------
#define AI_WinGetProcess:0xC402
SUB(CME_WinGetProcess, $AI_title, $AI_text)
    // получает PID окна
    // $AI_title - Заголовок/дескриптор/класс окна
    // $AI_text  - текст окна или пустая строка ""
    
    // Возвращаемые значения:
    // $CME_return  - найденный PID или 0
    INIWRITE($main_ini, "title", $AI_title, "window")
    INIWRITE($main_ini, "text", $AI_text, "window")
    WAITMS(5)
    PostMessage($hwnd_CME, AI_WinGetProcess, 0, 0)
    WHILE($CME_command != AI_WinGetProcess)
        WAITMS(10)
    END_CYC
END_SUB

//--- получить PID Clickermann-а -----------------------------------------------
#define AI_WinGetProcessCM:0xC403
SUB(CME_WinGetProcessCM)
    // получает PID окна Clickermann-а
    // $AI_title - Заголовок/дескриптор/класс окна
    // $AI_text  - текст окна или пустая строка ""
    
    // Возвращаемые значения:
    // $pid_CM  - найденный PID или 0
    PostMessage($hwnd_CME, AI_WinGetProcessCM, 0, 0)
    WHILE($CME_command != AI_WinGetProcessCM)
        WAITMS(10)
    END_CYC
    $pid_CM = $CME_return
END_SUB

//--- получить состояние указанного окна. --------------------------------------
#define AI_WinGetState:0xC404
SUB(CME_WinGetState, $AI_title, $AI_text)
    // получает состояние указанного окна
    // $AI_title - Заголовок/дескриптор/класс окна
    // $AI_text  - текст окна или пустая строка ""
    
    // Возвращаемые значения:
    // $CME_return  - состояние побитово
    //    1 = существует
    //    2 = отображается
    //    4 = доступно
    //    8 = активно
    //   16 = свёрнуто
    //   32 = развёрнуто
    // и раздельно:
    //    $fEXIST - существует
    //    $fSHOW - отображается
    //    $fENABLE - доступно
    //    $fACTIVE - активно
    //    $fMINIMIZE - свёрнуто
    //    $fMAXIMIZE - развёрнуто на весь экран
    INIWRITE($main_ini, "title", $AI_title, "window")
    INIWRITE($main_ini, "text", $AI_text, "window")
    WAITMS(5)
    PostMessage($hwnd_CME, AI_WinGetState, 0, 0)
    WHILE($CME_command != AI_WinGetState)
        WAITMS(10)
    END_CYC
    $CME_return = INT(INIREAD($main_ini, "return", "main"))
    $fstate = $CME_return
    $fEXIST = 0
    $fSHOW = 0
    $fENABLE = 0
    $fACTIVE = 0
    $fMINIMIZE = 0
    $fMAXIMIZE = 0
    IF($fstate > 31)
        $fMAXIMIZE = 1
        $fstate = $fstate - 32
    END_IF
    IF($fstate > 15)
        $fMINIMIZE = 1
        $fstate = $fstate - 16
    END_IF
    IF($fstate > 7)
        $fACTIVE = 1
        $fstate = $fstate - 8
    END_IF
    IF($fstate > 3)
        $fENABLE = 1
        $fstate = $fstate - 4
    END_IF
    IF($fstate > 1)
        $fSHOW = 1
        $fstate = $fstate - 2
    END_IF
    IF($fstate > 0)
        $fEXIST = 1
    END_IF
    IF($log > 1)
        LOGWRITE("CME_WinGetHandle.  hWnd:  ", $CME_return)
        LOGWRITE("существует               - ", $fEXIST)
        LOGWRITE("отображается             - ", $fSHOW)
        LOGWRITE("доступно                 - ", $fENABLE)
        LOGWRITE("активно                  - ", $fACTIVE)
        LOGWRITE("свёрнуто                 - ", $fMINIMIZE)
        LOGWRITE("развёрнуто на весь экран - ", $fMAXIMIZE)
    END_IF
END_SUB

//--- Поверх всех окон ---------------------------------------------------------
#define AI_WinSetOnTop:0xC405
SUB(CME_WinSetOnTop, $AI_hwnd, $AI_par1)
    // Ставит окно поверх всех окон
    // $AI_hwnd - hwnd окна
    // $AI_par1 - 1 - включить, 0 - выключить
    PostMessage($hwnd_CME, AI_WinSetOnTop, $AI_hwnd, $AI_par1)
    WHILE($CME_command != AI_WinSetOnTop)
        WAITMS(10)
    END_CYC
END_SUB

//--- Устанавливает прозрачность окна ------------------------------------------
#define AI_WinSetTrans:0xC406
SUB(CME_WinSetTrans, $AI_hwnd, $AI_par1)
    // Устанавливает прозрачность окна
    // $AI_hwnd - hwnd окна
    // $AI_par1 - прозрачность окна  255 = непрозрачно, 0 = прозрачно (невидимое)
    PostMessage($hwnd_CME, AI_WinSetTrans, $AI_hwnd, $AI_par1)
    WHILE($CME_command != AI_WinSetTrans)
        WAITMS(10)
    END_CYC
END_SUB

//--- Отслеживание прокрутки колеса мыши ---------------------------------------
#define AI_MouseWheelScrollEvent:0xC407
SUB(CME_MouseWheelScrollEvent, $AI_on_off, $AI_hwnd, $AI_BlockDefProc)
    // Запустить/остановить отслеживание прокрутки колеса мыши
    // $AI_on_off - 0/1 start/stop отслеживания собития
    // $AI_hwnd - hwnd окна. если не 0, события отслеживаются только для указанного окна
    // $AI_BlockDefProc - 0/1 следует ли блокировать событие
    
    // после запуска будут приходить сообщения.
    // при сообщении переменной $WheelScrollEvent присваивается 1
    // $WheelScrollEvent = 1
    PostMessage($hwnd_CME, AI_MouseWheelScrollEvent, $AI_hwnd, $AI_on_off+$AI_BlockDefProc*65536)
    $WheelScrollEvent = 0
    WHILE($CME_command != AI_MouseWheelScrollEvent)
        WAITMS(10)
    END_CYC
    IF($AI_on_off == 0)
        $WheelScrollEvent = 0
    END_IF
END_SUB

//--- Отслеживание прокрутки колеса мыши UpDown --------------------------------
#define AI_MouseWheelScrollEventUpDown:0xC408
SUB(CME_MouseWheelScrollEventUpDown, $AI_on_off, $AI_hwnd, $AI_BlockDefProc)
    // Запустить/остановить отслеживание прокрутки колеса мыши вверх и вниз отдельно
    // $AI_on_off - 0/1 start/stop отслеживания собития
    // $AI_hwnd - hwnd окна. если не 0, события отслеживаются только для указанного окна
    // $AI_BlockDefProc - 0/1 следует ли блокировать событие
    
    // после запуска будут приходить сообщения.
    // при сообщении переменной $WheelScrollEvent присваивается 2 - вверх или 3 - вниз
    // $WheelScrollEvent = 2
    PostMessage($hwnd_CME, AI_MouseWheelScrollEventUpDown, $AI_hwnd, $AI_on_off+$AI_BlockDefProc*65536)
    $WheelScrollEvent = 0
    WHILE($CME_command != AI_MouseWheelScrollEventUpDown)
        WAITMS(10)
    END_CYC
    IF($AI_on_off == 0)
        $WheelScrollEvent = 0
    END_IF
END_SUB

//--- Отслеживание движение мыши -----------------------------------------------
#define AI_MouseMoveEvent:0xC409
SUB(CME_MouseMoveEvent, $AI_on_off, $AI_hwnd, $AI_BlockDefProc)
    // Запустить/остановить отслеживание движения мыши
    // $AI_on_off - 0/1 start/stop отслеживания собития
    // $AI_hwnd - hwnd окна. если не 0, события отслеживаются только для указанного окна
    // $AI_BlockDefProc - 0/1 следует ли блокировать событие
    
    // после запуска будут приходить сообщения.
    // при сообщении переменной $MouseMoveEvent присваивается 1
    // $MouseMoveEvent = 2
    PostMessage($hwnd_CME, AI_MouseMoveEvent, $AI_hwnd, $AI_on_off+$AI_BlockDefProc*65536)
    $MouseMoveEvent = 0
    WHILE($CME_command != AI_MouseMoveEvent)
        WAITMS(10)
    END_CYC
    IF($AI_on_off == 0)
        $MouseMoveEvent = 0
    END_IF
END_SUB

//--- получить -------------------------
#define AI_:0xC40A
SUB(CME_)
    
END_SUB


//--- Передать границы региона SETREGION ---------------------------------------
#define AI_SETREGION:0xC420
SUB(CME_SETREGION, $AI_x1, $AI_y1, $AI_x2, $AI_y2)
    PostMessage($hwnd_CME, AI_SETREGION, $AI_x1+$AI_y1*65536, $AI_x2+$AI_y2*65536)
    WHILE($CME_command != AI_SETREGION)
        WAITMS(10)
    END_CYC
END_SUB

//--- преобразовать область в GREYSCALE ----------------------------------------
#define AI_GREYSCALE:0xC421
SUB(CME_GREYSCALE, $AI_x1, $AI_y1, $AI_x2, $AI_y2)
    PostMessage($hwnd_CME, AI_GREYSCALE, $AI_x1+$AI_y1*65536, $AI_x2+$AI_y2*65536)
    WHILE($CME_command != AI_GREYSCALE)
        WAITMS(10)
    END_CYC
END_SUB

//--- применить к области DRAMCONTRAST -----------------------------------------
#define AI_DRAMCONTRAST:0xC422
SUB(CME_DRAMCONTRAST, $AI_x1n, $AI_y1n, $AI_x2n, $AI_y2n, $AI_mid, $AI_k)
    CME_SETREGION($AI_x1n, $AI_y1n, $AI_x2n, $AI_y2n)
    PostMessage($hwnd_CME, AI_DRAMCONTRAST, $AI_mid, $AI_k)
    WHILE($CME_command != AI_DRAMCONTRAST)
        WAITMS(10)
    END_CYC
END_SUB


//--- Управление монитором -----------------------------------------------------
SUB(ToggleMonitor, $TM_hwnd, $TM_OnOff)
    $WM_SYSCOMMAND = 274
    $SC_MONITORPOWER = 61808
    _SendMessage($TM_hwnd, $WM_SYSCOMMAND, $SC_MONITORPOWER, $TM_OnOff)
END_SUB

//--- Тестирование функций. Отключить при импорте! -----------------------------
SUB(Test)
    WAITMS(300)
    LOGCLEAR
    log_show()
    //log_comands_list()
    
    //$x1 = 123
    //$y1 = 456
    //$x2 = 1600
    //$y2 = 1200
    
    // 100х100
    $x1 = 750
    $y1 = 426
    $x2 = 849
    $y2 = 525
    
    //
    $x1 = 650
    $y1 = 350
    $x2 = 900
    $y2 = 550
    
    // Full Screen
    //$x1 = 0
    //$y1 = 0
    //$x2 = $_xmax
    //$y2 = $_ymax
    
    //GETSCREEN
    
    $timer1 = $_ms
    
    //test_555()
    
    //CME_WinGetHandle("[TITLE:Clickermann_; W:310; H:194]", "") // окно кликера
    //print("$_hwnd_self ", $_hwnd_self)
    
    //CME_WinGetHandle("[ACTIVE]", "")          // активное окно
    //CME_WinGetHandle("[CLASS:Notepad++]", "")   // класс блокнот
    //CME_GetDesktopWindow()
    //CME_WinGetProcess("[CLASS:Notepad++]", "")
    
    //CME_WinGetProcessCM()
    
    //CME_WinGetState("[CLASS:Notepad++]", "")
    //$hwnd_Notepad = $CME_return
    //CME_WinSetOnTop($hwnd_Notepad, 1)
    //CME_WinSetTrans($hwnd_Notepad, 180)
    
    //CME_MouseWheelScrollEvent(1, 2296148, 1)
    //CME_MouseWheelScrollEvent(1, 0, 1)  // Отслеживаем WheelScroll С блокировкой события
    //WAIT(5)
    //CME_MouseWheelScrollEvent(0, 0, 0)  // закончили отслеживать WheelScroll
    //WAIT(3)
    
    //CME_MouseWheelScrollEventUpDown(1, 0, 1)  // Отслеживаем WheelScroll UpDown С блокировкой события
    //WAIT(5)
    //CME_MouseWheelScrollEventUpDown(0, 0, 0)  // закончили отслеживать WheelScroll UpDown
    //WAIT(3)
    
    CME_MouseMoveEvent(1, 0, 1)
    WAIT(5)
    CME_MouseMoveEvent(0, 0, 0)
    
    //CME_WINEXISTS("[CLASS:Notepad]")
    //CME_SETREGION($x1, $y1, $x2, $y2)
    //CME_GREYSCALE($x1, $y1, $x2, $y2)
    //CME_DRAMCONTRAST($x1, $y1, $x2, $y2, 147, 25)
    //CME_DRAMCONTRAST($x1, $y1, $x2, $y2, 160, 255)
    
    
    //WAITMS(50)
    print_timeaction("тест 1", $_ms - $timer1)
    
    //IF(($x2 = $_xmax) & ($y2 = $_ymax))
    //    SCREENSHOT
    //ELSE
    //    SCREENSHOTEX(700,400, 900,550, "Gray_", 0)
    //END_IF
    
    HALT
END_SUB

// =============================================================================
//##############################################################################

// Start
getHWND_CMTools()
clear_message_queue()
SETTHREAD(CME_GetResponse, 1)

Test()  // Тестирование функций. Отключить при импорте!

//##############################################################################


// 0xC400
// Получает дескриптор указанного окна
// CME_WinGetHandle("title", "text")
// $CME_return  - hWnd

// 0xC401
// Получает дескриптор окна рабочего стола
// CME_GetDesktopWindow()
// $CME_return  - hWnd

// 0xC402
// Получает идентификатор процесса (Process ID, PID), связанного с указанным окном
// CME_WinGetProcess("title", "text")
// $CME_return  - PID

// 0xC403
// Получает идентификатор процесса (PID) окна Clickermann
// CME_WinGetProcessCM()
// $CME_return  - PID
// $pid_CM      - PID

// 0xC404
// Получает состояние указанного окна
// CME_WinGetState("title", "text")
// $CME_return  - состояние побитово
//    1 = существует
//    2 = отображается
//    4 = доступно
//    8 = активно
//   16 = свёрнуто
//   32 = развёрнуто
// и раздельно:
//    $fEXIST - существует
//    $fSHOW - отображается
//    $fENABLE - доступно
//    $fACTIVE - активно
//    $fMINIMIZE - свёрнуто
//    $fMAXIMIZE - развёрнуто на весь экран

// 0xC405
// Поверх всех окон
// CME_WinSetOnTop(hwnd, 1/0)

// 0xC406
// Устанавливить прозрачность окна
// CME_WinSetTrans(hwnd, transporency)






// 0xC420
// Передать границы региона SETREGION
// CME_SETREGION($x1, $y1, $x2, $y2)

// 0xC421
// Преобразовать область в GREYSCALE
// CME_GREYSCALE($x1, $y1, $x2, $y2)

// 0xC422
// применить к области DRAMCONTRAST
// CME_DRAMCONTRAST($x1, $y1, $x2, $y2, $mid, $k)





//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


//$pid = 4936
//READMEM($pid, "004E20FC", 4)  // читаем адрес начала буфера в указателе
//$startbuf = $_return1
//LOGWRITE("$startbuf = ", $startbuf)

//$x1 = 194
//$y1 = 347
//$c = PXL($x1, $y1)
//LOGWRITE($c, "  RGB  ", COLORR($c), " ", COLORG($c), " ", COLORB($c))
//$startbufrd = $_return1 + ($y1*($_xmax+1)*4) + ($x1*4)
//toHEX($startbufrd)
//READMEM($pid, $HEX, 4)
//$read = $_return1
//LOGWRITE($read, "  RGB  ", COLORB($read), " ", COLORG($read), " ", COLORR($read))
//$gray_canal = INT((0.299*COLORR($c)) + (0.587*COLORG($c)) + (0.114*COLORB($c)))
//$gray = COLORGEN($gray_canal, $gray_canal, $gray_canal)
//LOGWRITE("$gray_canal = ", $gray_canal, "   ", $gray)